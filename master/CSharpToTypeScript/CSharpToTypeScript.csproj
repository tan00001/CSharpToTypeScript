<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>net9.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
    <RepositoryUrl>https://github.com/tan00001/CSharpToTypeScript</RepositoryUrl>
	<VersionPrefix>2.0.3</VersionPrefix>
    <AssemblyVersion>2.0.3.0</AssemblyVersion>
    <FileVersion>2.0.3.0</FileVersion>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
    <NoWarn>1701;1702;IDE0066;IDE0057</NoWarn>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|AnyCPU'">
    <NoWarn>1701;1702;IDE0066;IDE0057</NoWarn>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="System.Text.Json" Version="9.0.0" />
  </ItemGroup>

  <ItemGroup>
    <Compile Update="Properties\Resources.Designer.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
  </ItemGroup>

  <ItemGroup>
    <EmbeddedResource Update="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
  </ItemGroup>

  <Target Name="CopyFiles" AfterTargets="AfterBuild">
	<ItemGroup>
		<!-- Because this ItemGroup is inside the target, this will enumerate
            all files just before calling Copy. If the ItemGroup were outside
            the target , it would enumerate the files during evaluation, before
            the build starts, which may miss files created during the build. -->
	    <VsixIncludedFiles Include="$(OutDir)**\*.*" />
	</ItemGroup>
	<Copy SourceFiles="@(VsixIncludedFiles)" DestinationFolder="$(ProjectDir)..\CSharpToTypeScript.vsix\net9" />
  </Target>
</Project>
